{"ast":null,"code":"var _jsxFileName = \"/Users/krishnamurthy/go/src/filebox-app/client/src/components/events.js\";\nimport React from 'react';\nlet emitters = {};\n\nfunction subscribe(key, event, fn) {\n  if (emitters[event]) {\n    emitters[event][key] = fn;\n  } else {\n    emitters[event] = {};\n    emitters[event][key] = fn;\n  }\n}\n\nfunction unsubscribe(key, event) {\n  if (emitters[event]) {\n    if (key) {\n      delete emitters[event][key];\n    } else {\n      delete emitters[event];\n    }\n  }\n}\n\nfunction emit(event, payload) {\n  // trigger events if needed\n  if (emitters[event]) {\n    return Promise.all(Object.keys(emitters[event]).map(key => {\n      return emitters[event][key].apply(null, payload);\n    })).then(res => {\n      return emitters[event] ? Promise.resolve(res) : Promise.reject({\n        message: 'do not exist',\n        code: 'CANCELLED'\n      });\n    });\n  } else {\n    return Promise.reject({\n      message: 'oups, something went wrong',\n      code: 'NO_LISTENERS'\n    });\n  }\n}\n\nexport function EventReceiver(WrappedComponent) {\n  let id = Math.random().toString();\n  return class extends React.Component {\n    subscribe(event, callback) {\n      subscribe(id, event, callback);\n    }\n\n    unsubscribe(event) {\n      unsubscribe(id, event);\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, Object.assign({\n        subscribe: this.subscribe,\n        unsubscribe: this.unsubscribe\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/krishnamurthy/go/src/filebox-app/client/src/components/events.js"],"names":["React","emitters","subscribe","key","event","fn","unsubscribe","emit","payload","Promise","all","Object","keys","map","apply","then","res","resolve","reject","message","code","EventReceiver","WrappedComponent","id","Math","random","toString","Component","callback","render","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+BC,EAA/B,EAAkC;AAC9B,MAAGJ,QAAQ,CAACG,KAAD,CAAX,EAAmB;AACfH,IAAAA,QAAQ,CAACG,KAAD,CAAR,CAAgBD,GAAhB,IAAuBE,EAAvB;AACH,GAFD,MAEK;AACDJ,IAAAA,QAAQ,CAACG,KAAD,CAAR,GAAkB,EAAlB;AACAH,IAAAA,QAAQ,CAACG,KAAD,CAAR,CAAgBD,GAAhB,IAAuBE,EAAvB;AACH;AACJ;;AAED,SAASC,WAAT,CAAqBH,GAArB,EAA0BC,KAA1B,EAAgC;AAC5B,MAAGH,QAAQ,CAACG,KAAD,CAAX,EAAmB;AACf,QAAGD,GAAH,EAAO;AACH,aAAOF,QAAQ,CAACG,KAAD,CAAR,CAAgBD,GAAhB,CAAP;AACH,KAFD,MAEK;AACD,aAAOF,QAAQ,CAACG,KAAD,CAAf;AACH;AACJ;AACJ;;AAED,SAASG,IAAT,CAAcH,KAAd,EAAqBI,OAArB,EAA6B;AACzB;AACA,MAAGP,QAAQ,CAACG,KAAD,CAAX,EAAmB;AACf,WAAOK,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYX,QAAQ,CAACG,KAAD,CAApB,EAA6BS,GAA7B,CAAkCV,GAAD,IAAS;AACzD,aAAOF,QAAQ,CAACG,KAAD,CAAR,CAAgBD,GAAhB,EAAqBW,KAArB,CAA2B,IAA3B,EAAiCN,OAAjC,CAAP;AACH,KAFkB,CAAZ,EAEHO,IAFG,CAEGC,GAAD,IAAS;AACd,aAAOf,QAAQ,CAACG,KAAD,CAAR,GAAkBK,OAAO,CAACQ,OAAR,CAAgBD,GAAhB,CAAlB,GAAyCP,OAAO,CAACS,MAAR,CAAe;AAACC,QAAAA,OAAO,EAAE,cAAV;AAA0BC,QAAAA,IAAI,EAAE;AAAhC,OAAf,CAAhD;AACH,KAJM,CAAP;AAKH,GAND,MAMK;AACD,WAAOX,OAAO,CAACS,MAAR,CAAe;AAACC,MAAAA,OAAO,EAAE,4BAAV;AAAwCC,MAAAA,IAAI,EAAE;AAA9C,KAAf,CAAP;AACH;AACJ;;AAED,OAAO,SAASC,aAAT,CAAuBC,gBAAvB,EAAwC;AAC3C,MAAIC,EAAE,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,EAAT;AAEA,SAAO,cAAc1B,KAAK,CAAC2B,SAApB,CAA8B;AACjCzB,IAAAA,SAAS,CAACE,KAAD,EAAQwB,QAAR,EAAiB;AACtB1B,MAAAA,SAAS,CAACqB,EAAD,EAAKnB,KAAL,EAAYwB,QAAZ,CAAT;AACH;;AAEDtB,IAAAA,WAAW,CAACF,KAAD,EAAO;AACdE,MAAAA,WAAW,CAACiB,EAAD,EAAKnB,KAAL,CAAX;AACH;;AAEDyB,IAAAA,MAAM,GAAE;AACJ,aAAO,oBAAC,gBAAD;AAAkB,QAAA,SAAS,EAAE,KAAK3B,SAAlC;AAA6C,QAAA,WAAW,EAAE,KAAKI;AAA/D,SAAgF,KAAKwB,KAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AAXgC,GAArC;AAaH","sourcesContent":["import React from 'react';\nlet emitters = {}\n\nfunction subscribe(key, event, fn){\n    if(emitters[event]){\n        emitters[event][key] = fn;\n    }else{\n        emitters[event] = {};\n        emitters[event][key] = fn;\n    }\n}\n\nfunction unsubscribe(key, event){\n    if(emitters[event]){\n        if(key){\n            delete emitters[event][key];\n        }else{\n            delete emitters[event];\n        }\n    }\n}\n\nfunction emit(event, payload){\n    // trigger events if needed\n    if(emitters[event]){\n        return Promise.all(Object.keys(emitters[event]).map((key) => {\n            return emitters[event][key].apply(null, payload)\n        })).then((res) => {\n            return emitters[event] ? Promise.resolve(res) : Promise.reject({message: 'do not exist', code: 'CANCELLED'})\n        });\n    }else{\n        return Promise.reject({message: 'oups, something went wrong', code: 'NO_LISTENERS'})\n    }\n}\n\nexport function EventReceiver(WrappedComponent){\n    let id = Math.random().toString();\n\n    return class extends React.Component {\n        subscribe(event, callback){\n            subscribe(id, event, callback)\n        }\n\n        unsubscribe(event){\n            unsubscribe(id, event)\n        }\n\n        render(){\n            return <WrappedComponent subscribe={this.subscribe} unsubscribe={this.unsubscribe} {...this.props} />;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}